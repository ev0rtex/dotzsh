# vi: ft=zsh

# ------------------------------------------------------- #
#                          Zplug                          #
# ------------------------------------------------------- #
export ZPLUG_HOME="${HOME}/.zplug"

[ -d "${ZPLUG_HOME}" ] || curl -fsSL --proto-redir -all,https https://raw.githubusercontent.com/zplug/installer/master/installer.zsh | zsh
source "${ZPLUG_HOME}/init.zsh"

# ------------------------------------------------------- #
#                         Plugins                         #
# ------------------------------------------------------- #
zplug "zplug/zplug", hook-build:"zplug --self-manage"

# Custom modules/scripts
zplug "~/.zsh/config/0",                        use:"*.zsh", from:local, defer:0
zplug "~/.zsh/config/1",                        use:"*.zsh", from:local, defer:1
zplug "~/.zsh/config/2",                        use:"*.zsh", from:local, defer:2
zplug "~/.zsh/config/3",                        use:"*.zsh", from:local, defer:3

# Theme
zplug "bhilburn/powerlevel9k",                  use:"powerlevel9k.zsh-theme", as:theme

# Prezto modules
zplug "modules/history",                        from:prezto
# zplug "modules/utility",                        from:prezto
# zplug "modules/ruby",                           from:prezto
# zplug "modules/ssh",                            from:prezto
# zplug "modules/terminal",                       from:prezto
# zplug "modules/directory",                      from:prezto

# Oh-my-zsh modules
zplug "plugins/brew",                           from:oh-my-zsh, if:"[[ $OSTYPE == *darwin* ]]"
zplug "plugins/common-aliases",                 from:oh-my-zsh
zplug "plugins/docker",                         from:oh-my-zsh
zplug "plugins/docker-compose",                 from:oh-my-zsh
zplug "plugins/fasd",                           from:oh-my-zsh
zplug "plugins/fzf",                            from:oh-my-zsh
zplug "plugins/git",                            from:oh-my-zsh
zplug "plugins/git-extras",                     from:oh-my-zsh
zplug "plugins/npm",                            from:oh-my-zsh
zplug "plugins/packer",                         from:oh-my-zsh
zplug "plugins/pip",                            from:oh-my-zsh
zplug "plugins/tmux",                           from:oh-my-zsh

# Various zsh-users plugins
zplug "zsh-users/zsh-completions",              defer:0
zplug "zsh-users/zsh-syntax-highlighting",      defer:2
zplug "zsh-users/zsh-autosuggestions",          defer:2, on:"zsh-users/zsh-completions"
zplug "zsh-users/zsh-history-substring-search", defer:2

# Misc
zplug "rupa/z",                                 use:"z.sh"
zplug "tj/n",                                   use:"bin/n", as:command

# ------------------------------------------------------- #
#                       Install/load                      #
# ------------------------------------------------------- #

if ! zplug check --verbose; then
    printf "Install Zplug plugins? [y/N]: "
    if read -q; then
        echo; zplug install
    fi
fi
zplug load
# zplug load --verbose

# ------------------------------------------------------- #
#                         Aliases                         #
# ------------------------------------------------------- #

alias vim="nvim"
alias ssh="TERM=xterm-256color ssh"
alias j="z"

alias -s zshrc="vim"
alias -s vimrc="vim"
alias -s conf="vim"
alias -s ssh="ssh"

# ------------------------------------------------------- #
#                         SSH Keys                        #
# ------------------------------------------------------- #

# agent_keys=(
    # "personal/github"
    # "personal/gitlab"
# )
# for key in ${agent_keys[@]}; do
    # ssh-add -K ~/.ssh/${key} &>/dev/null || true
# done

# ------------------------------------------------------- #
#                         Terminal                        #
# ------------------------------------------------------- #

# Determine if we're inside an integrated shell
if  [[ "${TERM_PROGRAM}" != "vscode" ]] && \
    [[ "${TERMINAL_EMULATOR}" != JetBrains* ]] && \
    [[ -z "${VAULTED_ENV}" ]]; then
    integrated=false
else
    integrated=true
fi

# Launch or attach TMUX session
if [[ -z "${TMUX}" ]] && [[ ${integrated} == false ]]; then
    ordinals=(
        "primary"
        "secondary"
        "tertiary"
        "quaternary"
        "quinary"
        "senary"
        "septenary"
        "octonary"
        "nonary"
        "decenary"
        "undenary"
        "duodenary"
    )
    session=${ordinals[$(( $(tmux ls | wc -l) + 1 - $(tmux ls | grep -v '(attached)' | wc -l) ))]}
    tmux attach -t ${session} || tmux new -s ${session}
else
    if [[ ${integrated} == false ]]; then
        /usr/local/bin/macInfo -c
    fi
fi

